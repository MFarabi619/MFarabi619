* Arch Linux

*** Preparing the Live Environment

1. *Set up archiso cowspace (temporary writable space):*
    #+begin_src bash
    mount -o remount,size=4g /run/archiso/cowspace
    #+end_src
2. *Set console font for better visibility:*
    #+begin_src bash
    setfont ter-132n
    #+end_src
3. *Test internet connectivity:*
    #+begin_src bash
    ping google.com
    #+end_src

*** Wireless Configuration with =iwctl=

1. Open =iwctl=:
    #+begin_src bash
    iwctl
    #+end_src
2. List wireless devices:
    #+begin_src bash
    device list
    #+end_src
3. Power on your wireless card (if not already enabled):
    #+begin_src bash
    device wlan0 set-property Powered on
    #+end_src
    *OR* if rfkill is blocking it:
    #+begin_src bash
    rfkill unblock wlan
    #+end_src
4. Verify wireless device properties:
    #+begin_src bash
    device wlan0 show
    #+end_src
5. Scan for networks:
    #+begin_src bash
    station wlan0 get-networks
    #+end_src
6. Connect to your WiFi:
    #+begin_src bash
    station wlan0 connect "IT HURTS WHEN IP 5G"
    #+end_src
    Enter the WiFi passphrase when prompted.
7. Verify connectivity:
    #+begin_src bash
    ping google.com
    #+end_src

Exit =iwctl= by pressing =Ctrl+C=.

---

*** Disk Preparation

1. Update the package database:
    #+begin_src bash
    pacman -Syu
    #+end_src
2. List disk partitions:
    #+begin_src bash
    lsblk
    #+end_src
3. Check current partition setup:
    #+begin_src bash
    fdisk -l
    #+end_src
4. Initialize disk setup (example for =/dev/nvme0n1=):
    #+begin_src bash
    gdisk /dev/nvme0n1
    #+end_src
    Steps in =gdisk=:
    - Enter expert mode:
      #+begin_src bash
      x
      #+end_src
    - Zap the disk:
      #+begin_src bash
      z
      #+end_src
    - Confirm twice:
      #+begin_src bash
      Y
      Y
      #+end_src
5. Recheck disk after changes:
    #+begin_src bash
    lsblk
    #+end_src

---

*** Install and Run ArchInstall Script

1. Install =archinstall=:
    #+begin_src bash
    pacman -Syu archinstall
    #+end_src
2. Run the installer:
    #+begin_src bash
    archinstall
    #+end_src
3. Example options in =archinstall=:
    - *Mirror region:* Canada
    - *Filesystem:* Btrfs
    - *Swap:* Swap on zram enabled
    - *Encryption:* None
    - *Bootloader:* systemd-boot with unified kernel images
    - *Hostname:* =archlinux=
    - *User setup:* Include root and a standard user
    - *Profile:* Minimal
    - *Audio:* Pipewire
    - *Additional packages:* =git vim rust gcc cmake less python=
    - *Network configuration:* NetworkManager
    - *Timezone:* =America/Toronto=

4. After installation:
    #+begin_src bash
    bcfg boot dump -b
    bcfg boot rm #
    #+end_src
5. Exit installation and shutdown:
    #+begin_src bash
    shutdown now
    #+end_src

---

*** Post-Installation Setup

1. Set console font:
    #+begin_src bash
    setfont -d
    #+end_src
2. Reconnect to WiFi:
    #+begin_src bash
    sudo nmcli dev wifi connect "IT HURTS WHEN IP 5G" password "*****"
    #+end_src
3. Update the system and install essential tools:
    #+begin_src bash
    sudo pacman -Syu git base-devel
    #+end_src

---

*** Hyprland Installation

1. Clone the HyDE repository:
    #+begin_src bash
    git clone --depth 1 https://github.com/HyDE-Project/HyDE ~/HyDE
    cd ~/HyDE/Scripts
    #+end_src
2. Run the installer:
    #+begin_src bash
    ./install.sh
    #+end_src
    Select options:
    - =1-yay=
    - =1-zsh=
    - =1-gnu-free-fonts=
    - =2-multimedia-streamer=
    - =2-corners=

3. Useful additional utilities:
    #+begin_src bash
    cowsay figlet lolcat nyancat cmatrix lazygit lazydocker pacseek yazi btop kmon ugm netscanner procs
    #+end_src

---

* NixOS

*** Flash NixOS ISO to USB

1. Download the ISO:
   [https://nixos.org/download/#nixos-iso](https://nixos.org/download/#nixos-iso)

2. Flash ISO:
    #+begin_src bash
    sudo dd if=/path/to/nixos.iso of=/dev/sdX status=progress conv=fdatasync
    #+end_src

---

*** Install NixOS with HyDE

1. Enable experimental features:
    Add this to =/etc/nixos/configuration.nix=:
    #+begin_src nix
    nix.settings.experimental-features = [ "nix-command" "flakes" ];
    #+end_src
    Apply the changes:
    #+begin_src bash
    sudo nixos-rebuild switch
    #+end_src
2. Install =git= if needed:
    #+begin_src bash
    nix-shell -p git
    #+end_src

3. Clone and use HyDE templates:
    #+begin_src bash
    mkdir hydenix && cd hydenix
    nix flake init -t github:richen604/hydenix
    #+end_src

4. Open =configuration.nix=:
    #+begin_src bash
    nano configuration.nix
    #+end_src
    Modify options marked as =! EDIT=.

5. Save hardware configuration:
    #+begin_src bash
    sudo nixos-generate-config --show-hardware-config > hardware-configuration.nix
    #+end_src

6. Initialize Git and commit:
    #+begin_src bash
    git init && git add .
    #+end_src

7. Rebuild system using flakes:
    #+begin_src bash
    sudo nixos-rebuild switch --flake .
    #+end_src

**** configuration.nix template
  #+begin_src nix

  #+end_src

---

*** Additional Notes

- Change user passwords:
    #+begin_src bash
    passwd
    #+end_src
- After HyDE setup, rebuild theme caches:
    #+begin_src bash
    hyde-shell reload
    #+end_src

---

* FreeBSD

** Add user to video group
#+begin_src bash
pw groupmod video -m mfarabi
groups mfarabi
#+end_src

** Install packages

*** Core Hyprland
#+begin_src bash
pkg install hyprland hypridle hyprlock hyprpaper hyprpicker xdg-desktop-portal-hyprland mousepad kitty dolphin
#+end_src

*** GUI + Fonts & Theming
#+begin_src bash
pkg install fastfetch zellij cmatrix cowsay asciiquarium figlet lolcat nyancat nerd-fonts noto-emoji rgb-tui
#+end_src

#+begin_src bash
sudo pkg install ripgrep-all coreutils fd ohmyzsh
#+end_src

#+begin_src bash
sudo pkg install eza yazi zsh-autosuggestions zsh-fast-syntax-highlighting
#+end_src

#+begin_src bash
eval "$(fzf --zsh)"; echo "source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh" > ~/.zshrc; echo "source /usr/local/share/zsh-fast-syntax-highlighting/zsh-fast-syntax-highlighting.zsh"
#+end_src

#+begin_src bash
sudo git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
#+end_src
Open ~/.zshrc, find the line that sets ZSH_THEME, and change its value to "powerlevel10k/powerlevel10k".

*** Devtools
#+begin_src bash
pkg install vim neovim emacs btop git lazygit direnv bash zsh bat nix cmake vips docker docker-compose k9s
#+end_src

*** Extras
#+begin_src bash
pkg install nginx-full
#+end_src


** Start Hyprland (with seatd)
#+begin_src bash
seat-launch hyprland
#+end_src

*** Verify GPU (Intel)
#+begin_src bash
pciconf -lv | grep -B3 display
#+end_src

Example output:

vgapci0@pci0:0:2:0: class=0x030000 card=...
vendor = 'Intel Corporation'
device = 'HD Graphics 620'

*** Set up Intel GPU driver
#+begin_src bash
pkg install drm-kmod
#+end_src

#+begin_src bash
sysrc kld_list+="i915kms"
echo 'kern.vty=vt' | tee -a /boot/loader.conf
#+end_src

#+begin_src bash
reboot
#+end_src

*** Verify DRM driver
#+begin_src bash
dmesg | grep drm
ls /dev/dri
#+end_src

Expected:

[drm] Initialized i915 ...
/dev/dri/card0
/dev/dri/renderD128

* Ubuntu

[[https://tech.aufomm.com/my-nix-journey-use-nix-with-ubuntu/]]


#+begin_src sh
curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
#+end_src


#+begin_src sh
cd ~MFarabi619/libs/dotfiles/hosts/ubuntu; git add .; nix run nixpkgs#home-manager -- switch --flake ./#$USER
#+end_src

* macOS Silicon

[[https://docs.determinate.systems/getting-started/organizations][Adopt Determinate in your organization]]
