Followed along with [[https://www.codecademy.com/courses/rust-for-programmers/articles/program-structure-rust][Rust For Programmers - Codecademy]].

* Installation
[[https://rustup.rs][rustup.rs]]
- `rustc`: compiler
- `rustup`: version manager
- `cargo`: scaffolding + package management

* Create New Crate

#+BEGIN_SRC sh
cargo new my_binary
#+END_SRC

Creates:

├── src/        # Contains all Rust code
│  └── main.rs
└── Cargo.toml  # Crate configuration

#+BEGIN_SRC sh
# New library with the name "my_library"
cargo new --lib my_library
#+END_SRC


├── src/
│  └── lib.rs  # Creates `lib.rs` instead of `main.rs`
└── Cargo.toml

* Program Structure

#+BEGIN_SRC rust
fn main() {
    println!("Hello, world!");
}
#+END_SRC

- `main()` required by all binary programs as entry point
- Run via `cargo run`

** NAMING CONVENTIONS

- Constructs are separated by case.

#+BEGIN_SRC rust
// UpperCamelCase: Used for structs, enums, types, and traits

struct UnitStruct;

struct TupleStruct(T);

struct StructName {
    field: NamedTuple,
}

enum EnumName {
    VariantName,
}

type TypeAlias = u8;

trait TraitName {}

// snake_case: Used for variables, functions, attributes, and macros

let variable_name = true;

fn function_name() {
    function_call();
}

#![attribute_name]

macro_name!();

// SCREAMING_SNAKE_CASE: Reserved for constants

const EIGHTY_EIGHT: u32 = 88;
#+END_SRC

* Common Cargo Commands

```
cargo new           # Create a new binary executable crate
cargo new --lib     # Create a new library crate

cargo build         # Compiles our crate
cargo build --release # Compiles our crate with optimizations
cargo run           # Compiles our crate and runs the compiled executable

cargo test          # Run all tests in a crate
cargo doc --open    # Build and open our crate's documentation in a web browser
cargo clean         # Cleans up temporary files created during compilation
cargo publish       # Publishes your crate to `crates.io`

cargo install       # Installs a binary directly from crates.io
```

* Cargo Manifest
